library(pryr)
setClass("client4",
slots = list(fname = "character",
lname = "character",
age = "numeric",
gender = "character",
married = "logical"))
k4 <- new(Class = "client4",
fname = "John",
lname = "Smith",
age = 35,
gender = "M",
married = TRUE)
otype(k4)
isS4(k4)
isS4(data.frame(x = 1))
getClass("client4")
str(k4)
k4$fname
k4@fname
k4@lname
k4@married
client4 <- setClass("client4",
slots = list(fname = "character",
lname = "character",
age = "numeric",
gender = "character",
married = "logical"),
validity = function(object)
{
if(object@age < 0) return("Age cannot be negative!")
if(object@age > 100) return("Age is too large!")
if(!object@gender %in% c("F", "M"))
return('Incorrect gender - use "F" or "M"!')
return(TRUE)
})
client4
k5 <- client4(fname = "Joan",
lname = "Warren",
age = 124,
gender = "F",
married = FALSE)
k5 <-  client4(fname = "Joan",
lname = "Warren",
age = 24,
gender = "D",
married = FALSE)
k5 <- client4(fname = "Joan",
lname = "Warren",
age = 24,
gender = "F",
married = FALSE)
k4@age <- 140
validObject(k4)
k4@age <- 40
validObject(k4)
slot(k4, "age")
slot(k4, "age") <- 35
slot(k4, "age") <- "40"
ftype(print)
ftype(show)
print(k4)
show(k4)
k4
isS4(print)
isS4(show)
show
showMethods("show")
setMethod(f = "show", # method
signature = "client4", # class which this method refers to
# and the method itself (function)
# analogous as in the method print.client
# but with @ instead of $
definition = function(object) {
# and go to the new line
cat(object@fname, object@lname, "\n")
# print age and go to the new line
cat("age:", object@age, "years\n")
# print gender and go to the new line
cat("gender:", object@gender, "\n")
# print if married and go to the new line
cat("married:", ifelse(object@married, "Yes", "No"), "\n")
}
)
k4
k4
show(k4)
print(k4)
setGeneric(name = "age4",
def = function(x) {
standardGeneric("age4")
})
setGeneric(name = "age4",
def = function(x) {
standardGeneric("age4")
})
age4
showMethods(age4)
setMethod("age4",
signature = "client4",
definition = function(x) x@age
)
showMethods(age4)
age4(k4)
# generic function
setGeneric("compare",
# lets define two arguments
# (objects for comparison)
function(x, y) standardGeneric("compare"))
compare
setMethod("compare",
# here classes of required input objects are defined
signature = c("client4", "client4"),
definition = function(x, y) {
cat(x@fname, x@lname, "has",
ifelse(x@gender == y@gender,
"the same gender as",
"different gender than"),
y@fname, y@lname, "\n")
cat(x@fname, x@lname, "has",
ifelse(x@married == y@married,
"the same marital status as",
"different marital status than"),
y@fname, y@lname, "\n")
cat(x@fname, x@lname, "is",
ifelse(x@age == y@age,
"as old as",
ifelse(x@age > y@age,
"older than",
"younger than")),
y@fname, y@lname, "\n")
})
compare(k4, k5)
compare(k5, k4)
compare(k4, data.frame(x = 1))
