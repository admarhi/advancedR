diamonds %h% 15
requiredPackages = c("rbenchmark", "microbenchmark", "profvis", "multcomp", "compile")
for(i in requiredPackages){
for(i in requiredPackages){if(!require(i,character.only = TRUE)) install.packages(i)}
for(i in requiredPackages){if(!require(i,character.only = TRUE)) library(i,character.only = TRUE) }
}
library(rbenchmark)
f
library(rbenchmark)
library(microbenchmark)
library(profvis)
library(compiler) # compile is a base package installed by default
library(multcomp)
# needed for some plots
library(ggplot2)
system.time(runif(1e7))
system.time(runif(1e7))
system.time(runif(1e7))
system.time({
x <- runif(1e6)
y <- ifelse(x > 0.5, 1, 0)
layout(matrix(1:2, nrow = 2, ncol = 1)) # divides the device up into as
# many rows and columns as there are in matrix mat,
# with the column-widths and the row-heights specified in the respective arguments.
hist(x)
hist(y, breaks = c(0, 0.5, 1))
layout(matrix(1))
print(summary(as.factor(y)))
rm(x, y)
})
myData <- data.frame(x = rnorm(1e7))
my_mean1 <- function(x) {
result <- sum(x) / length(x)
return(result)
}
my_mean2 <- function(x) {
result <- NA
n <- length(x)
for(i in 1:n)
result <- sum(result, x[i], na.rm = TRUE)
result <- result/n
return(result)
}
system.time(m1 <- my_mean1(myData$x))
system.time(m2 <- my_mean2(myData$x))
system.time(m3 <- mean(myData$x))
system.time(m4 <- mean(as.numeric(myData$x))) # creates vector, less complex than the object above
identical(m1, m3)
identical(m2, m3)
identical(m4, m3)
# lets see the results
m1
m2
m3
m4
# they seem to be the same, but...
m1 - m3
# m1-m3 = 6.03*10^{-18}=0,000000000000000603
m2 - m3
m4 - m3
(m1 == m3)
(abs(m1 - m3) < 1e-15)
benchmark(m1 <- my_mean1(myData$x[1:100000]),
m2 <- my_mean2(myData$x[1:100000]),
m3 <- mean(myData$x[1:100000]),
m4 <- mean(as.numeric(myData$x[1:100000]))
)
(compare_mean <- benchmark("my_mean1" = {m1 <- my_mean1(myData$x[1:100000])},
"my_mean2" = {m2 <- my_mean2(myData$x[1:100000])},
"mean" = {m3 <- mean(myData$x[1:100000])},
"mean_on_num" = {m4 <- mean(as.numeric(myData$x[1:100000]))}
)
)
(compare_mean2 <- microbenchmark("my_mean1" = {m1 <- my_mean1(myData$x[1:10000])},
"my_mean2" = {m2 <- my_mean2(myData$x[1:10000])},
"mean" = {m3 <- mean(myData$x[1:10000])},
"mean_on_num" = {m4 <- mean(as.numeric(myData$x[1:10000]))}
)
)
(compare_mean1a <- benchmark("my_mean1" = {m1 <- my_mean1(myData$x[1:10000])},
"my_mean2" = {m2 <- my_mean2(myData$x[1:10000])},
"mean" = {m3 <- mean(myData$x[1:10000])},
"mean_on_num" = {m4 <- mean(as.numeric(myData$x[1:10000]))},
columns = c("test", "replications", "elapsed", "relative"),
order = "relative",
replications = 500
)
)
ggplot2::autoplot(compare_mean2a)
(compare_mean2a <- microbenchmark("my_mean1" = {m1 <- my_mean1(myData$x[1:1000])},
"my_mean2" = {m2 <- my_mean2(myData$x[1:1000])},
"mean" = {m3 <- mean(myData$x[1:1000])},
"mean_on_num" = {m4 <- mean(as.numeric(myData$x[1:1000]))},
times = 500,
unit = "milliseconds" # other possible: ns, us, ms, s
)
)
ggplot2::autoplot(compare_mean2a)
ggplot2::autoplot(compare_mean2a, log = FALSE)
ggplot2::autoplot(compare_mean2a)
boxplot(compare_mean2a)
median
my_mean2 <- function(x) {
result <- NA
n <- length(x)
for(i in 1:n)
result <- sum(result, x[i], na.rm = T)
result <- result/n
return(result)
}
my_mean2
install.packages("compiler")
library(compiler)
my_mean2_cmp <- compiler::cmpfun(my_mean2)
my_mean2_cmp
enableJIT(0)
benchmark("my_mean2" = {m1 <- my_mean2(myData$x[1:10000])},
"my_mean2_cmp" = {m2 <- my_mean2_cmp(myData$x[1:10000])}
)[, 1:6]
enableJIT(3)
benchmark("my_mean2" = {m1 <- my_mean2(myData$x[1:10000])},
"my_mean2_cmp" = {m2 <- my_mean2_cmp(myData$x[1:10000])}
)[, 1:6]
my_mean2_cmp <- compiler::cmpfun(my_mean2)
my_mean2_cmp
enableJIT(3)
benchmark("my_mean2" = {m1 <- my_mean2(myData$x[1:10000])},
"my_mean2_cmp" = {m2 <- my_mean2_cmp(myData$x[1:10000])}
)[, 1:6]
enableJIT(0)
benchmark("my_mean2" = {m1 <- my_mean2(myData$x[1:10000])},
"my_mean2_cmp" = {m2 <- my_mean2_cmp(myData$x[1:10000])}
)[, 1:6]
enableJIT(3)
benchmark("my_mean2" = {m1 <- my_mean2(myData$x[1:10000])},
"my_mean2_cmp" = {m2 <- my_mean2_cmp(myData$x[1:10000])}
)[, 1:6]
cmpfile(infile = "my_mean2.R",  # source file
outfile = "my_mean2_cmp.R") # destination file
rm(my_mean2)
source("my_mean2.R")
my_mean2
cmpfile(infile = "my_mean2.R",  # source file
outfile = "my_mean2_cmp.R") # destination file
profvis(
{
x <- data.frame(matrix(rnorm(1e6),
ncol = 5))
result <- rep(NA, 5)
n <- nrow(x)
for(j in 1:5){
for (i in 1:n) {
result[j] <- sum(result[j], x[i,j],
na.rm = TRUE)
}
result[j] <- result[j]/n
hist(x[,j])
boxplot(x[,j])
}
}
)
profvis(
{
x <- data.frame(matrix(rnorm(1e6),
ncol = 5))
result <- rep(NA, 5)
n <- nrow(x)
for(j in 1:5){
for (i in 1:n) {
result[j] <- sum(result[j], x[i,j],
na.rm = TRUE)
}
result[j] <- result[j]/n
hist(x[,j])
boxplot(x[,j])
}
}
)
# For test use following data:
library(MASS)
data(survey)
head(survey)
cv <- function(z, na.rm = T) {
a <- sd(z, na.rm = na.rm)
b <- mean(z, na.rm = na.rm)
return(a/b)
}
cv(survey)
cv(survey)
cv(survey$Age)
cv2 <- function(z, na.rm = T, frac = F, perc = F) {
a <- sd(z, na.rm = na.rm)
b <- mean(z, na.rm = na.rm)
cv <- (a/b)
if (frac == T) {
return(fractions(cv))
} else if (perc == T) {
return(cv*100)
} else {
return(cv)
}
}
cv2(survey$Age, frac = T)
cv2(survey$Age, perc = T)
datasets <- split(survey, survey[, 'Sex'])
datasets[['Male']]
datasets[['Female']]
cv4.2 <- function(d, c, n, na = T) {
datasets <- split(d, d[, n])
for (i in datasets) {
results[i] <- CV3.2(datasets[i], c, na = na)
return(results)
}
}
cv4.2(survey, 'Age', 'Sex', na = T)
CV3.2 <- function(z, x, frac = FALSE, perc = FALSE, na = TRUE) {
a <- sd(z[,x], na.rm = na)
b <- mean(z[,x], na.rm = na)
cv <- a/b
if (frac == TRUE) {
return(fractions(cv))
} else if (perc == TRUE) {
return(cv*100)
} else {
return(cv)
}
}
cv4.2 <- function(d, c, n, na = T) {
datasets <- split(d, d[, n])
for (i in datasets) {
results[i] <- CV3.2(datasets[i], c, na = na)
return(results)
}
}
cv4.2(survey, 'Age', 'Sex', na = T)
cvSplit <- function(d, c, n, na = T) {
nominalVar <- unique(d[,n])
results <- list()
for (i in nominalVar) {
results[i] <- CV3.2(d[d[,n] == i, ], c, na)
return(results[i])
}
}
cvSplit(survey, 'Age', 'Sex')
cvSplit <- function(d, c, n, na = T) {
nominalVar <- unique(d[,n])
results <- list()
for (i in 1:nominalVar) {
results[i] <- CV3.2(d[d[,n] == i, ], c, na)
return(results[i])
}
}
cvSplit(survey, 'Age', 'Sex')
cvSplit(survey, 'Sex', 'Age')
cvSplit <- function(d, c, n, na = T) {
nominalVar <- unique(d[n,])
results <- list()
for (i in 1:nominalVar) {
results[i] <- CV3.2(d[d[,n] == i, ], c, na)
return(results[i])
}
}
cvSplit(survey, 'Age', 'Sex')
cvSplit <- function(d, c, n, na = T) {
nominalVar <- unique(d[,n])
results <- list()
for (i in 1:nominalVar) {
results[i] <- CV3.2(d[d[,n] == i, ], c, na)
return(results[i])
}
}
cvSplit(survey, 'Age', 'Sex')
cvSplit <- function(d, c, n, na = T) {
nominalVar <- unique(d[,n])
results <- list()
for (i in 1:length(nominalVar)) {
results[i] <- CV3.2(d[d[,n] == i, ], c, na)
return(results[i])
}
}
cvSplit(survey, 'Age', 'Sex')
cvSplit <- function(d, c, n, na = T) {
nominalVar <- unique(d[,n])
results <- c()
for (i in 1:length(nominalVar)) {
results[i] <- CV3.2(d[d[,n] == i, ], c, na)
return(results[i])
}
}
cvSplit(survey, 'Age', 'Sex')
n<-"Sex"
c<-"Age"
nominalVar <- unique(d[,n])
nominalVar
d<-survey
nominalVar <- unique(d[,n])
ominalVar
nominalVar
results <- c()
for (i in 1:length(nominalVar)) {
results[i] <- CV3.2(d[d[,n] == i, ], c, na)
return(results[i])
}
for (i in 1:length(nominalVar)) {
results[i] <- CV3.2(d[d[,n] == i, ], c)
return(results[i])
}
results
results <- c()
for (i in 1:length(nominalVar)) {
results[i] <- CV3.2(d[d[,n] == i, ], c, na =T)
return(results[i])
}
results
#     c2) second should work with dataframe, thus
cv3 <- function(z, x, na.rm = T, frac = F, perc = F) {
a <- sd(z$x, na.rm = na.rm)
b <- mean(z$x, na.rm = na.rm)
cv <- (a/b)
if (frac == T) {
return(fractions(cv))
} else if (perc == T) {
return(cv*100)
} else {
return(cv)
}
}
cv3(survey, 'Age')
#     c2) second should work with dataframe, thus
cv3 <- function(z, x, na.rm = T, frac = F, perc = F) {
a <- sd(z$x, na.rm = na.rm)
b <- mean(z$x)
cv <- (a/b)
if (frac == T) {
return(fractions(cv))
} else if (perc == T) {
return(cv*100)
} else {
return(cv)
}
}
cv3(survey, 'Age')
b <- mean(z$x)
z <- survey
x <- 'Age'
b <- mean(z$x)
mean(z$x)
#     c2) second should work with dataframe, thus
cv3 <- function(z, x, na.rm = T, frac = F, perc = F) {
a <- sd(z[,x], na.rm = na.rm)
b <- mean(z[,x], na.rm = na.rm)
cv <- (a/b)
if (frac == T) {
return(fractions(cv))
} else if (perc == T) {
return(cv*100)
} else {
return(cv)
}
}
cv3(survey, 'Age')
unique(survey[, 'Sex'])
#     c2) second should work with dataframe, thus
cv_user <- function(z, x, na.rm = T, frac = F, perc = F) {
a <- sd(z[,x], na.rm = na.rm)
b <- mean(z[,x], na.rm = na.rm)
cv <- (a/b)
if (frac == T) {
return(fractions(cv))
} else if (perc == T) {
return(cv*100)
} else {
return(cv)
}
}
cv_user(survey, 'Age')
cv_user2 <- function(z, c, n, na.rm = T, frac = F, perc = F) {
results <- numeric()
for (i in unique(z[,n])){
results[i] <- cv_user(z[z[,n] == i, ], c, na.rm = T)
}
return(results)
}
cv_user2(survey, 'Age', 'Sex', na.rm = T)
cv_user(survey, 'Age')
cv_user2 <- function(z, c, n, na.rm = T, frac = F, perc = F) {
results <- numeric()
for (i in unique(z[,n])){
results[i] <- cv_user(z[z[,n] == i, ], c, na.rm = T)
}
return(results)
}
cv_user2(survey, 'Age', 'Sex', na.rm = T)
cv_user2 <- function(z, c, n, na.rm = T, frac = F, perc = F) {
results <- numeric()
for (i in unique(z[,n])){
results[i] <- cv_user(z[z[,n] == i, ], c, na.rm = T, ...)
}
return(results)
}
cv_user2(survey, 'Age', 'Sex', na.rm = T, frac = T)
cv_user2 <- function(z, c, n, na.rm = T, frac = F, perc = F) {
results <- numeric()
for (i in unique(z[,n])){
results[i] <- cv_user(z[z[,n] == i, ], c, na.rm = T, frac, perc)
}
return(results)
}
cv_user2(survey, 'Age', 'Sex', na.rm = T, frac = T)
cv_user2 <- function(z, c, n, na.rm = T, frac = F, perc = F) {
results <- numeric()
for (i in unique(z[,n])){
results[i] <- cv_user(z[z[,n] == i, ], c, na.rm = T, frac = frac, perc = perc)
}
return(results)
}
cv_user2(survey, 'Age', 'Sex', na.rm = T, frac = T)
cv_user2 <- function(z, c, n, na.rm = T, frac = F, perc = F) {
results <- numeric()
for (i in unique(z[,n])){
results[i] <- cv_user(z[z[,n] == i, ], c, na.rm = T)
}
return(results)
}
cv_user2(survey, 'Age', 'Sex', na.rm = T, frac = T)
cv_user2 <- function(z, c, n, na.rm = T) {
results <- numeric()
for (i in unique(z[,n])){
results[i] <- cv_user(z[z[,n] == i, ], c, na.rm = T)
}
return(results)
}
cv_user2(survey, 'Age', 'Sex', na.rm = T, frac = T)
cv_user2 <- function(z, c, n, na.rm = T, frac = F, perc = F) {
results <- numeric()
for (i in unique(z[,n])){
results[i] <- cv_user(z[z[,n] == i, ], c, na.rm = T, frac = T, perc = perc)
}
return(results)
}
cv_user2(survey, 'Age', 'Sex', na.rm = T, frac = T)
datasets <- split(survey, survey[, 'Sex'])
datasets[['Male']]
datasets[['Female']]
head(Cars93)
manyplot <- function(df) {
if (is.data.frame(df)) {
for (i in 1:ncol(df)) {
if (is.integer(df[,i])) {
boxplot(df[,i])
} else if (is.numeric(df[,i])) {
hist(df[,i])
} else if (is.factor(df[,i])) {
barplot(table(df[,i]))
} else {
return('unknown data type')
}
}
} else {
return('is not data.frame')
}
}
manyplot(Cars93)
lm(help())
help(lm)
lm(survey)
lm('Age' ~ 'Gender', data = survey)
lm('Age' ~ 'Gender', survey)
lm(Age ~ Gender, data = survey)
lm(Age ~ Sex, data = survey)
help(split())
help(split())
help(split)
# 5. Write a function, which will divide dataset with respect to some
# nominal variable and run regression with given formula for each subset.
# Function should return a list with a results of regression for each subset
splitreg <- function (df, n) {
result <- list()
sets <- split(df, n, drop = T)
sets
}
splitreg(survey)
splitreg(survey, 'Sex')
subsets <- split(df, n, drop = T)
subsets <- split(df$n, drop = T)
# 5. Write a function, which will divide dataset with respect to some
# nominal variable and run regression with given formula for each subset.
# Function should return a list with a results of regression for each subset
splitreg <- function (df, n) {
result <- list()
subsets <- split(df$n, drop = T)
}
splitreg(survey, 'Sex')
# 5. Write a function, which will divide dataset with respect to some
# nominal variable and run regression with given formula for each subset.
# Function should return a list with a results of regression for each subset
splitreg <- function (df, n) {
result <- list()
subsets <- split(df$n, unique(n), drop = T)
}
splitreg(survey, 'Sex')
# 5. Write a function, which will divide dataset with respect to some
# nominal variable and run regression with given formula for each subset.
# Function should return a list with a results of regression for each subset
splitreg <- function (df, n) {
result <- list()
subsets <- split(df$n, n, drop = T)
}
splitreg(survey, 'Sex')
knitr::opts_chunk$set(echo = TRUE)
```{R}
plot(cars)
